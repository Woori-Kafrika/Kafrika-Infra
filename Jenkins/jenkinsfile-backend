pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:5001'
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/kafrika-backend"
        DOCKER_TAG = "v${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'chmod +x ./gradlew'
            }
        }
        
        stage('Build & Test') {
            steps {
                sh 'bash ./gradlew clean build jacocoTestReport'
                
                // 아티팩트 보관
                archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                
                // 테스트 결과
                junit testResults: 'build/test-results/test/*.xml', allowEmptyResults: true
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def image = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", ".")
                    image.tag("latest")
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                script {
                    docker.withRegistry("http://${DOCKER_REGISTRY}") {
                        def image = docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        image.push()
                        image.push("latest")
                    }
                }
            }
        }
        
        stage('Update GitOps') {
            steps {
                sh '''
                    if [ -f k8s/deployment.yaml ]; then
                        echo "📝 Updating GitOps manifest..."
                        sed -i "s|image: .*kafrika-backend:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g" k8s/deployment.yaml
                        
                        git config user.email "jenkins@company.com"
                        git config user.name "Jenkins CI"
                        
                        if ! git diff --quiet k8s/deployment.yaml; then
                            git add k8s/deployment.yaml
                            git commit -m "🚀 Deploy kafrika-backend:${DOCKER_TAG} [skip ci]"
                            git push origin HEAD:main
                            echo "✅ GitOps updated successfully"
                        else
                            echo "ℹ️ No changes to commit"
                        fi
                    else
                        echo "⚠️ k8s/deployment.yaml not found"
                    fi
                '''
            }
        }
    }
    
    post {
        always {
            script {
                sh '''
                    echo "🧹 Cleanup..."
                    docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                    docker rmi ${DOCKER_IMAGE}:latest || true
                    docker system prune -f || true
                '''
            }
        }
        success {
            echo "✅ CI/CD 파이프라인 성공! 🎉"
            echo "📦 이미지: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
        }
        failure {
            echo "❌ 빌드 실패!"
        }
    }
}