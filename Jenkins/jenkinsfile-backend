pipeline {
  agent any
  
  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10'))
    skipDefaultCheckout(false)
    timeout(time: 30, unit: 'MINUTES')
  }
  
  environment {
    SONAR_TOKEN = credentials('sonar-token')
    SONAR_HOST_URL = 'http://sonarqube-local:9000'
    DOCKER_REGISTRY = 'docker-registry-local:5000'
    IMAGE_NAME = 'kafrika-backend'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    ARGOCD_SERVER = 'localhost:8080'
    ARGOCD_TOKEN = credentials('argocd-token')
    
    GRADLE_OPTS = '-Dorg.gradle.daemon=false -Dorg.gradle.caching=false'
    DOCKER_BUILDKIT = '1'
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'ls -la'
      }
    }
    
    stage('Environment Check') {
      parallel {
        stage('Check Java') {
          steps {
            sh 'echo "JAVA_HOME=$JAVA_HOME"'
            sh 'java -version'
            sh 'echo "Gradle version:"'
            sh './gradlew --version'
          }
        }
        stage('Check Docker') {
          steps {
            sh 'docker --version'
            sh 'docker info'
          }
        }
        stage('Check Network') {
          steps {
            sh 'ping -c 2 sonarqube-local || echo "SonarQube not reachable"'
            sh 'ping -c 2 docker-registry-local || echo "Registry not reachable"'
          }
        }
      }
    }
    
    stage('Prepare') {
      steps {
        sh 'chmod +x gradlew'
        sh './gradlew dependencies --no-daemon'
      }
    }
    
    stage('Build & Test') {
      parallel {
        stage('Build') {
          steps {
            sh './gradlew clean build -x test --no-daemon'
            archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true, allowEmptyArchive: true
          }
        }
        stage('Unit Tests') {
          steps {
            sh './gradlew test jacocoTestReport --no-daemon'
          }
          post {
            always {
              publishTestResults testResultsPattern: 'build/test-results/test/*.xml'
              publishCoverage adapters: [jacocoAdapter('build/reports/jacoco/test/jacocoTestReport.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
            }
          }
        }
      }
    }
    
    stage('Code Quality') {
      steps {
        withSonarQubeEnv('SonarQube') {
          sh """
            ./gradlew sonarqube \
              -Dsonar.projectKey=kafrika-backend \
              -Dsonar.projectName="Kafrika Backend" \
              -Dsonar.projectVersion=${env.BUILD_NUMBER} \
              -Dsonar.sources=src/main/java \
              -Dsonar.tests=src/test/java \
              -Dsonar.java.binaries=build/classes \
              -Dsonar.java.test.binaries=build/test-classes \
              -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_TOKEN \
              --no-daemon
          """
        }
      }
    }
    
    stage('Quality Gate') {
      steps {
        timeout(time: 5, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
    
    stage('Security Scan') {
      steps {
        sh './gradlew dependencyCheckAnalyze --no-daemon || true'
      }
      post {
        always {
          archiveArtifacts artifacts: 'build/reports/dependency-check-report.html', allowEmptyArchive: true
        }
      }
    }
    
    stage('Docker Operations') {
      stages {
        stage('Docker Build') {
          steps {
            script {
              sh """
                docker build \
                  --build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                  --build-arg VCS_REF=\$(git rev-parse HEAD) \
                  --build-arg VERSION=${IMAGE_TAG} \
                  -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} \
                  -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest \
                  .
              """
            }
          }
        }
        
        stage('Docker Security Scan') {
          steps {
            sh """
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                -v \$(pwd):/tmp/.trivy \
                aquasec/trivy:latest image \
                --exit-code 0 \
                --severity HIGH,CRITICAL \
                --format table \
                ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} || true
            """
          }
        }
        
        stage('Docker Push') {
          steps {
            retry(3) {
              sh """
                docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
              """
            }
          }
        }
      }
    }
    
    stage('GitOps Update') {
      steps {
        script {
          sh """
            cp k8s/deployment.yaml k8s/deployment.yaml.backup
            
            sed -i 's|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:.*|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}|g' k8s/deployment.yaml
            
            grep "image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}" k8s/deployment.yaml
            
            git config user.email "jenkins@company.com"
            git config user.name "Jenkins CI"
            
            if ! git diff --quiet k8s/deployment.yaml; then
              git add k8s/deployment.yaml
              git commit -m "üöÄ Deploy kafrika-backend:${IMAGE_TAG} [skip ci]"
              git push origin HEAD:main
              echo "‚úÖ GitOps repository updated successfully"
            else
              echo "‚ÑπÔ∏è  No changes to commit"
            fi
          """
        }
      }
    }
    
    stage('Deploy to Kubernetes') {
      steps {
        script {
          sh """
            echo "üöÄ Triggering ArgoCD sync for kafrika-backend..."
            
            argocd app sync kafrika-backend \
              --auth-token $ARGOCD_TOKEN \
              --server $ARGOCD_SERVER \
              --insecure \
              --timeout 300
            
            argocd app wait kafrika-backend \
              --auth-token $ARGOCD_TOKEN \
              --server $ARGOCD_SERVER \
              --insecure \
              --timeout 600 \
              --health
            
            argocd app get kafrika-backend \
              --auth-token $ARGOCD_TOKEN \
              --server $ARGOCD_SERVER \
              --insecure
          """
        }
      }
    }
    
    stage('Post-Deploy Verification') {
      steps {
        script {
          sh """
            echo "üîç Running post-deployment verification..."
            
            kubectl wait --for=condition=ready pod -l app=kafrika-backend --timeout=300s
            
            kubectl get deployment kafrika-backend -o wide
            kubectl get pods -l app=kafrika-backend
          """
        }
      }
    }
  }
  
  post {
    always {
      echo "üèÅ Build finished: ${currentBuild.currentResult}"
      
      sh """
        docker rmi ${env.DOCKER_REGISTRY}/${env.IMAGE_NAME}:${env.IMAGE_TAG} || true
        docker rmi ${env.DOCKER_REGISTRY}/${env.IMAGE_NAME}:latest || true
        docker system prune -f || true
      """
      
      archiveArtifacts artifacts: 'build/reports/**/*', allowEmptyArchive: true
      
      cleanWs(cleanWhenNotBuilt: false,
              deleteDirs: true,
              disableDeferredWipeout: true,
              notFailBuild: true)
    }
    
    success {
      echo "‚úÖ CI/CD ÌååÏù¥ÌîÑÎùºÏù∏ ÏÑ±Í≥µ!"
      echo "üöÄ kafrika-backend:${env.IMAGE_TAG} Ïù¥ KubernetesÏóê ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞∞Ìè¨ÎêòÏóàÏäµÎãàÎã§."
    }
    
    failure {
      echo "‚ùå CI/CD ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìå®!"
      echo "üîç Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÏó¨ Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÏÑ∏Ïöî: ${env.BUILD_URL}"
      
      script {
        try {
          sh """
            echo "üîÑ Attempting rollback..."
            argocd app rollback kafrika-backend \
              --auth-token $ARGOCD_TOKEN \
              --server $ARGOCD_SERVER \
              --insecure
          """
        } catch (Exception e) {
          echo "‚ö†Ô∏è  Rollback failed: ${e.getMessage()}"
        }
      }
    }
    
    unstable {
      echo "‚ö†Ô∏è  ÎπåÎìúÍ∞Ä Î∂àÏïàÏ†ïÌï©ÎãàÎã§. ÌÖåÏä§Ìä∏ Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî."
    }
  }
}