pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:5001'
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/kafrika-backend"
        DOCKER_TAG = "v${env.BUILD_NUMBER}"
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'chmod +x ./gradlew'
            }
        }
        
        stage('Build & Test') {
            steps {
                sh 'bash ./gradlew clean build jacocoTestReport'
                
                // 아티팩트 보관
                archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                
                // 테스트 결과
                junit testResults: 'build/test-results/test/*.xml', allowEmptyResults: true
            }
        }
        
       stage('SonarQube Analysis') {
        steps {
          withSonarQubeEnv('SonarQube-Local') {
            script {
              def scannerHome = tool 'sonar-scanner'
              sh """
                echo "Scanner path: ${scannerHome}"
                ls -l ${scannerHome}/bin/sonar-scanner || true

                # 실행 권한 부여 (noexec이면 이건 효과 없을 수 있음)
                chmod +x ${scannerHome}/bin/sonar-scanner || true

                # noexec 방지: 쉘로 실행
                sh ${scannerHome}/bin/sonar-scanner \
                  -Dsonar.projectKey=kafrika-backend \
                  -Dsonar.projectName="Kafrika Backend" \
                  -Dsonar.sources=src/main/java \
                  -Dsonar.tests=src/test/java \
                  -Dsonar.java.binaries=build/classes/java/main \
                  -Dsonar.java.test.binaries=build/classes/java/test \
                  -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                  -Dsonar.junit.reportPaths=build/test-results/test \
              """
            }
          }
        }
      }


        
        stage('Quality Gate') {
            steps {
                echo "📊 Checking Quality Gate..."
                
                script {
                    try {
                        timeout(time: 5, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "⚠️ Quality Gate status: ${qg.status}"
                                echo "📊 SonarQube URL: http://localhost:9000/dashboard?id=kafrika-backend"
                                currentBuild.result = 'UNSTABLE'
                            } else {
                                echo "✅ Quality Gate passed!"
                            }
                        }
                    } catch (Exception e) {
                        echo "⚠️ Quality Gate check failed: ${e.message}"
                        echo "📊 Check SonarQube manually: http://localhost:9000"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "🐳 Building Docker image..."
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    
                    echo "📏 Image info:"
                    docker images ${DOCKER_IMAGE}
                '''
            }
        }
        
        stage('Push to Registry') {
            steps {
                sh '''
                    echo "⬆️ Pushing to registry..."
                    
                    # Registry 연결 확인
                    curl -fsSL --max-time 10 http://docker-registry-local:5000/v2/ >/dev/null
                    
                    # 이미지 푸시
                    docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ${DOCKER_IMAGE}:latest
                    
                    echo "✅ Images pushed successfully"
                    echo "📦 ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    echo "📦 ${DOCKER_IMAGE}:latest"
                '''
            }
        }
        
        stage('Update GitOps') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    sh '''
                        if [ -f k8s/deployment.yaml ]; then
                            echo "📝 Updating GitOps manifest..."
                            sed -i "s|image: .*kafrika-backend:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g" k8s/deployment.yaml
                            
                            echo "📋 Updated deployment.yaml:"
                            grep -A2 -B2 "image:" k8s/deployment.yaml || true
                            
                            git config user.email "jenkins@company.com"
                            git config user.name "Jenkins CI"
                            
                            # 최신 변경사항 가져오기
                            git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Woori-Kafrika/Kafrika-Infra.git
                            git pull origin main --rebase || true
                            
                            if ! git diff --quiet k8s/deployment.yaml; then
                                git add k8s/deployment.yaml
                                git commit -m "🚀 Deploy kafrika-backend:${DOCKER_TAG} [skip ci]"
                                git push origin HEAD:main
                                
                                echo "✅ GitOps updated successfully"
                            else
                                echo "ℹ️ No changes to commit"
                            fi
                        else
                            echo "⚠️ k8s/deployment.yaml not found"
                            find . -name "*.yaml" -o -name "*.yml" | head -10
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                echo "🧹 Cleanup..."
                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                docker rmi ${DOCKER_IMAGE}:latest || true
                docker system prune -f || true
            '''
        }
        success {
            echo "✅ CI/CD 파이프라인 성공! 🎉"
            echo "📦 이미지: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
            
            script {
                if (currentBuild.result == 'UNSTABLE') {
                    echo "⚠️ 품질 게이트 이슈가 있지만 배포는 성공했습니다"
                    echo "📊 SonarQube에서 코드 품질을 확인하세요: http://localhost:9000"
                }
            }
        }
        failure {
            echo "❌ 빌드 실패!"
        }
        unstable {
            echo "⚠️ 빌드는 성공했지만 품질 이슈가 있습니다"
            echo "📊 SonarQube 리포트를 확인하세요: http://localhost:9000/dashboard?id=kafrika-backend"
        }
    }
}