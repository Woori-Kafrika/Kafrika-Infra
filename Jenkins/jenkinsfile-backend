pipeline {
  agent any
  
  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10'))
    skipDefaultCheckout(false)
    timeout(time: 30, unit: 'MINUTES')
  }
  
  environment {
    SONAR_TOKEN = credentials('sonar-token')
    SONAR_HOST_URL = 'http://sonarqube-local:9000'  // 기존 컨테이너 이름 사용
    DOCKER_REGISTRY = 'docker-registry-local:5000'  // 기존 컨테이너 이름 사용
    IMAGE_NAME = 'kafrika-backend'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    ARGOCD_SERVER = 'localhost:8080'
    ARGOCD_TOKEN = credentials('argocd-token')
    
    GRADLE_OPTS = '-Dorg.gradle.daemon=false -Dorg.gradle.caching=false'
    DOCKER_BUILDKIT = '1'
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'ls -la'
      }
    }
    
    stage('Environment Check') {
      parallel {
        stage('Check Java') {
          steps {
            sh 'echo "JAVA_HOME=$JAVA_HOME"'
            sh 'java -version'
            sh 'echo "Gradle version:"'
            sh './gradlew --version'
          }
        }
        stage('Check Docker') {
          steps {
            sh 'docker --version'
            sh 'docker info'
          }
        }
        stage('Check Network') {
          steps {
            sh 'ping -c 2 sonarqube-local || echo "SonarQube not reachable"'
            sh 'ping -c 2 docker-registry-local || echo "Registry not reachable"'
          }
        }
      }
    }
    
    stage('Prepare') {
      steps {
        sh 'chmod +x gradlew'
        sh './gradlew dependencies --no-daemon'
      }
    }
    
    stage('Build & Test') {
      parallel {
        stage('Build') {
          steps {
            sh './gradlew clean build -x test --no-daemon'
            archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true, allowEmptyArchive: true