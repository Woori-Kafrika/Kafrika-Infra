pipeline {
    agent any

    environment {
        SERVER_IP = credentials('jcloud-ip')  
        SSH_PORT = credentials('backend-server-port')  
        DOCKER_IMAGE = "0b6fa52889bf.ngrok.app/test/backend"
        DOCKER_TAG = "v${env.BUILD_NUMBER}"
        SCANNER_HOME = tool 'SonarQube Scanner'
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                sh './gradlew clean test jacocoTestReport build'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=springboot-project \
                        -Dsonar.sources=src/main/java \
                        -Dsonar.tests=src/test/java \
                        -Dsonar.java.binaries=build/classes/java/main \
                        -Dsonar.junit.reportPaths=build/test-results/test \
                        -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f Dockerfile .")
                    docker.withRegistry('https://0b6fa52889bf.ngrok.app', 'harbor-kafrika') {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }
    }
}
