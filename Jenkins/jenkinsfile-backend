pipeline {
  agent any
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    skipDefaultCheckout(false)
    timeout(time: 30, unit: 'MINUTES')
  }
  
  environment {
    SONAR_TOKEN = credentials('sonar-token')
    SONAR_HOST_URL = 'http://sonarqube-local:9000'
    DOCKER_REGISTRY = 'docker-registry-local:5001'
    IMAGE_NAME = 'kafrika-backend'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    ARGOCD_SERVER = 'localhost:8080'
    ARGOCD_TOKEN = credentials('argocd-token')
    
    GRADLE_OPTS = '-Dorg.gradle.daemon=false -Dorg.gradle.caching=false'
    DOCKER_BUILDKIT = '1'
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'ls -la'
        sh 'pwd'
      }
    }
    
    stage('Environment Check') {
      steps {
        sh 'echo "JAVA_HOME=$JAVA_HOME"'
        sh 'java -version'
        sh 'docker --version'
        sh 'curl -f http://sonarqube-local:9000/api/system/status || echo "SonarQube not reachable"'
        sh 'curl -f http://docker-registry-local:5001/v2/ || echo "Registry not reachable"'
      }
    }
    
    stage('Prepare') {
      steps {
        sh 'echo "Checking Gradle installation..."'
        
        script {
          try {
            sh 'chmod 755 gradlew'
            sh 'sh gradlew --version'
            env.GRADLE_CMD = 'sh gradlew'
            echo "✅ Using gradlew wrapper"
          } catch (Exception e) {
            echo "⚠️  gradlew wrapper failed, using system gradle"
            sh 'gradle --version'
            env.GRADLE_CMD = 'gradle'
          }
        }
        
        sh 'echo "Using Gradle command: ${GRADLE_CMD}"'
        sh '${GRADLE_CMD} dependencies --no-daemon'
      }
    }
    
    stage('Build') {
      steps {
        sh '${GRADLE_CMD} clean build -x test --no-daemon'
        archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true, allowEmptyArchive: true
      }
    }
    
    stage('Test') {
      steps {
        sh '${GRADLE_CMD} test --no-daemon'
      }
      post {
        always {
          // 기본적인 테스트 결과만 아카이브
          archiveArtifacts artifacts: 'build/test-results/**/*', allowEmptyArchive: true
          archiveArtifacts artifacts: 'build/reports/**/*', allowEmptyArchive: true
        }
      }
    }
    
    stage('Docker Build') {
      steps {
        script {
          sh '''
            docker build \
              --build-arg BUILD_DATE=$(date -u +\'%Y-%m-%dT%H:%M:%SZ\') \
              --build-arg VCS_REF=$(git rev-parse HEAD) \
              --build-arg VERSION=${IMAGE_TAG} \
              -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} \
              -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest \
              .
          '''
        }
      }
    }
    
    stage('Docker Push') {
      steps {
        retry(3) {
          sh '''
            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
          '''
        }
      }
    }
    
    stage('GitOps Update') {
      steps {
        script {
          sh '''
            if [ -f k8s/deployment.yaml ]; then
              echo "📝 Updating k8s/deployment.yaml..."
              cp k8s/deployment.yaml k8s/deployment.yaml.backup
              
              sed -i "s|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:.*|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}|g" k8s/deployment.yaml
              
              echo "Updated deployment.yaml:"
              grep "image:" k8s/deployment.yaml
              
              git config user.email "jenkins@company.com"
              git config user.name "Jenkins CI"
              
              if ! git diff --quiet k8s/deployment.yaml; then
                git add k8s/deployment.yaml
                git commit -m "🚀 Deploy kafrika-backend:${IMAGE_TAG} [skip ci]"
                git push origin HEAD:main || echo "Git push failed - check credentials"
                echo "✅ GitOps repository updated successfully"
              else
                echo "ℹ️  No changes to commit"
              fi
            else
              echo "⚠️  k8s/deployment.yaml not found, skipping GitOps update"
              find . -name "*.yaml" -o -name "*.yml" | head -10
            fi
          '''
        }
      }
    }
  }
  
  post {
    always {
      echo "🏁 Build finished: ${currentBuild.currentResult}"
      
      sh '''
        echo "🧹 Cleaning up Docker images..."
        docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} || true
        docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest || true
        docker system prune -f || true
      '''
      
      sh 'rm -rf build/tmp/* || true'
    }
    
    success {
      echo "✅ CI/CD 파이프라인 성공!"
      echo "🚀 kafrika-backend:${env.IMAGE_TAG} 이 성공적으로 빌드되었습니다."
      echo "📦 Docker 이미지: ${env.DOCKER_REGISTRY}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"
    }
    
    failure {
      echo "❌ CI/CD 파이프라인 실패!"
      echo "🔍 로그를 확인하여 문제를 해결하세요: ${env.BUILD_URL}"
    }
    
    unstable {
      echo "⚠️  빌드가 불안정합니다. 테스트 결과를 확인하세요."
    }
  }
}