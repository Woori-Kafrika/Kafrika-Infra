 pipeline {
  agent any
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    skipDefaultCheckout(false)
    timeout(time: 30, unit: 'MINUTES')
  }

  environment {
    SONAR_TOKEN     = credentials('sonar-token')
    SONAR_HOST_URL  = 'http://sonarqube-local:9000'
    DOCKER_REGISTRY = 'localhost:5001'
    REGISTRY_HEALTH_URL = 'http://docker-registry-local:5000/v2/'
    IMAGE_NAME      = 'kafrika-backend'
    IMAGE_TAG       = "${env.BUILD_NUMBER}"
    GRADLE_OPTS     = '-Dorg.gradle.daemon=false -Dorg.gradle.caching=false'
    DOCKER_BUILDKIT = '1'
  }

  stages {
    stage('1. Checkout & Setup') {
      steps {
        checkout scm
        script {
          env.GIT_COMMIT_HASH = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          env.GIT_BRANCH = sh(returnStdout: true, script: 'git branch --show-current').trim()
          env.BUILD_TIMESTAMP = sh(returnStdout: true, script: 'date -u +"%Y%m%d_%H%M%S"').trim()
        }
        sh '''
          echo "📋 Build Information:"
          echo "  Branch: ${GIT_BRANCH}"
          echo "  Commit: ${GIT_COMMIT_HASH}"
          echo "  Build: #${BUILD_NUMBER}"
          echo "  Timestamp: ${BUILD_TIMESTAMP}"
          
          echo "📁 Directory structure:"
          ls -la
          pwd
          
          echo "🔧 Setting up permissions..."
          chmod +x ./gradlew || echo "chmod failed, continuing..."
          
          echo "✅ Setup completed"
        '''
      }
    }

    stage('2. Basic Environment Check') {
      steps {
        sh '''
          echo "🔍 Basic Environment Check:"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "USER: $(whoami)"
          echo "PWD: $(pwd)"
          
          echo "Java version:"
          java -version || echo "Java check failed"
          
          echo "Docker version:"
          docker --version || echo "Docker check failed"
          
          echo "Gradle wrapper check:"
          ls -la ./gradlew
          file ./gradlew || echo "file command not available"
          
          echo "✅ Environment check completed"
        '''
      }
    }

    stage('3. Gradle Version Test') {
      steps {
        sh '''
          echo "🔧 Testing Gradle wrapper..."
          
          # 권한 재확인
          chmod +x ./gradlew
          
          # gradlew 실행 테스트
          echo "Executing: ./gradlew --version"
          ./gradlew --version || {
            echo "❌ gradlew failed, investigating..."
            echo "File permissions:"
            ls -la ./gradlew
            echo "File type:"
            file ./gradlew 2>/dev/null || echo "file command not available"
            echo "Attempting with bash:"
            bash ./gradlew --version || echo "bash execution also failed"
            exit 1
          }
          
          echo "✅ Gradle wrapper working"
        '''
      }
    }

    stage('4. Service Health Check') {
      steps {
        sh '''
          echo "🏥 Service Health Checks:"
          
          echo "Checking SonarQube..."
          if curl -fsSL --max-time 10 ${SONAR_HOST_URL}/api/system/status; then
            echo "✅ SonarQube is healthy"
          else
            echo "⚠️ SonarQube not reachable"
          fi

          echo "Checking Docker Registry..."
          if curl -fsSL --max-time 10 ${REGISTRY_HEALTH_URL}; then
            echo "✅ Docker Registry is healthy"
          else
            echo "⚠️ Docker Registry not reachable"
          fi
          
          echo "✅ Health checks completed"
        '''
      }
    }

    stage('5. Simple Build Test') {
      steps {
        sh '''
          echo "🔨 Testing simple build..."
          
          # 간단한 gradle 명령 테스트
          ./gradlew tasks --no-daemon || {
            echo "❌ gradle tasks failed"
            exit 1
          }
          
          echo "Testing compile..."
          ./gradlew compileJava --no-daemon || {
            echo "❌ compileJava failed"
            exit 1
          }
          
          echo "✅ Simple build test passed"
        '''
      }
    }

    stage('6. Docker Build Test') {
      when {
        expression { return fileExists('Dockerfile') }
      }
      steps {
        sh '''
          echo "🐳 Testing Docker build..."
          
          if [ -f Dockerfile ]; then
            echo "Dockerfile found, testing build..."
            docker build -t test-build:${BUILD_NUMBER} . || {
              echo "❌ Docker build failed"
              exit 1
            }
            
            echo "Cleaning up test image..."
            docker rmi test-build:${BUILD_NUMBER} || true
            
            echo "✅ Docker build test passed"
          else
            echo "⚠️ No Dockerfile found"
          fi
        '''
      }
    }
  }

  post {
    always {
      echo "🏁 Debug pipeline finished: ${currentBuild.currentResult}"
      sh '''
        echo "🧹 Cleanup..."
        docker system prune -f || true
      '''
    }
    success {
      echo "✅ All tests passed! Ready for full pipeline."
    }
    failure {
      echo "❌ Debug pipeline failed at stage: ${env.STAGE_NAME}"
      echo "🔍 Check logs above for specific error details"
    }
  }
}