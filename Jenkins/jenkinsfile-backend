pipeline {
    agent any

    environment {
        DOCKER_HUB_USER = 'hongseokchoi'  // ‚ö†Ô∏è Ïã§Ï†ú Docker Hub IDÎ°ú ÏàòÏ†ï
        DOCKER_IMAGE = "${DOCKER_HUB_USER}/kafrika-backend"
        DOCKER_TAG = "v${env.BUILD_NUMBER}"
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'chmod +x ./gradlew'
            }
        }

        stage('Build & Test') {
            steps {
                sh './gradlew clean build jacocoTestReport'
                archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                junit testResults: 'build/test-results/test/*.xml', allowEmptyResults: true
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube-Local') {
                    sh """
                        chmod +x ${SCANNER_HOME}/bin/sonar-scanner || true
                        ${SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectKey=kafrika-backend \
                          -Dsonar.projectName="Kafrika Backend" \
                          -Dsonar.sources=src/main/java \
                          -Dsonar.tests=src/test/java \
                          -Dsonar.java.binaries=build/classes/java/main \
                          -Dsonar.java.test.binaries=build/classes/java/test \
                          -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                          -Dsonar.junit.reportPaths=build/test-results/test
                    """
                }
            }
        }

        stage('Quality Gate') {
          steps {
              echo "üìä Checking Quality Gate..."
              script {
                  try {
                      timeout(time: 5, unit: 'MINUTES') {
                          def qg = waitForQualityGate()
                          if (qg.status != 'OK') {
                              echo "‚ö†Ô∏è Quality Gate status: ${qg.status}"
                              echo "üìä SonarQube URL: http://localhost:9000/dashboard?id=kafrika-backend"
                              currentBuild.result = 'UNSTABLE'
                          } else {
                              echo "‚úÖ Quality Gate passed!"
                          }
                      }
                  } catch (Exception e) {
                      echo "‚ö†Ô∏è Quality Gate check failed: ${e.message}"
                      echo "üìä Check SonarQube manually: http://localhost:9000"
                      currentBuild.result = 'UNSTABLE'
                  }
              }
          }
      }


        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                '''
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh '''
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${DOCKER_IMAGE}:latest
                        docker logout
                    '''
                }
            }
        }

        stage('Update GitOps') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    sh '''
                        if [ -f k8s/deployment.yaml ]; then
                            sed -i "s|image: .*kafrika-backend:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g" k8s/deployment.yaml
                            git config user.email "jenkins@company.com"
                            git config user.name "Jenkins CI"
                            git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Woori-Kafrika/Kafrika-Infra.git
                            git pull origin main --rebase || true

                            if ! git diff --quiet k8s/deployment.yaml; then
                                git add k8s/deployment.yaml
                                git commit -m "üöÄ Deploy kafrika-backend:${DOCKER_TAG} [skip ci]"
                                git push origin HEAD:main
                            else
                                echo "‚ÑπÔ∏è No changes to commit"
                            fi
                        else
                            echo "‚ùó k8s/deployment.yaml not found"
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            sh '''
                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                docker rmi ${DOCKER_IMAGE}:latest || true
                docker system prune -f || true
            '''
        }
        success {
            echo "‚úÖ CI/CD ÏôÑÎ£å: ${DOCKER_IMAGE}:${DOCKER_TAG}"
        }
        failure {
            echo "‚ùå ÎπåÎìú Ïã§Ìå®!"
        }
        unstable {
            echo "‚ö†Ô∏è ÌíàÏßà Í≤åÏù¥Ìä∏ Ïã§Ìå®Î°ú unstable"
        }
    }
}
