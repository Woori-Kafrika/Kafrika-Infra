pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:5001'
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/kafrika-backend"
        DOCKER_TAG = "v${env.BUILD_NUMBER}"
        SCANNER_HOME = tool 'SonarQube Scanner'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'chmod +x ./gradlew'
            }
        }
        
        stage('Cleanup') {
            steps {
                sh 'bash ./gradlew clean'
            }
        }
        
        stage('Build & Test') {
            steps {
                sh 'bash ./gradlew build jacocoTestReport'
                
                // ÏïÑÌã∞Ìå©Ìä∏ Î≥¥Í¥Ä
                archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                
                // ÌÖåÏä§Ìä∏ Í≤∞Í≥º
                junit testResultsPattern: 'build/test-results/test/*.xml', allowEmptyResults: true
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube-Local') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \\
                        -Dsonar.projectKey=kafrika-backend \\
                        -Dsonar.projectName="Kafrika Backend" \\
                        -Dsonar.sources=src/main/java \\
                        -Dsonar.tests=src/test/java \\
                        -Dsonar.java.binaries=build/classes/java/main \\
                        -Dsonar.java.test.binaries=build/classes/java/test \\
                        -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \\
                        -Dsonar.junit.reportPaths=build/test-results/test
                    """
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", ".")
                    docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").tag("${DOCKER_IMAGE}:latest")
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                script {
                    docker.withRegistry("http://${DOCKER_REGISTRY}") {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        docker.image("${DOCKER_IMAGE}:latest").push()
                    }
                }
            }
        }
        
        stage('Update GitOps') {
            steps {
                sh '''
                    if [ -f k8s/deployment.yaml ]; then
                        echo "üìù Updating GitOps manifest..."
                        sed -i "s|image: .*kafrika-backend:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g" k8s/deployment.yaml
                        
                        git config user.email "jenkins@company.com"
                        git config user.name "Jenkins CI"
                        
                        if ! git diff --quiet k8s/deployment.yaml; then
                            git add k8s/deployment.yaml
                            git commit -m "üöÄ Deploy kafrika-backend:${DOCKER_TAG} [skip ci]"
                            git push origin HEAD:main
                            echo "‚úÖ GitOps updated successfully"
                        else
                            echo "‚ÑπÔ∏è No changes to commit"
                        fi
                    else
                        echo "‚ö†Ô∏è k8s/deployment.yaml not found"
                    fi
                '''
            }
        }
    }
    
    post {
        always {
            sh '''
                echo "üßπ Cleanup..."
                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                docker rmi ${DOCKER_IMAGE}:latest || true
                docker system prune -f || true
            '''
        }
        success {
            echo "‚úÖ ÎπåÎìú ÏÑ±Í≥µ! üéâ"
            echo "üì¶ Ïù¥ÎØ∏ÏßÄ: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
        }
        failure {
            echo "‚ùå ÎπåÎìú Ïã§Ìå®!"
        }
    }
}